// Copyright 2018
//
// MIT License

syntax = "proto3";

option go_package = "github.com/openspock/net/proto";

import "google/protobuf/any.proto";

package proto;

// Node represents a unique endpoint (host + port) on the network.
//
// A single host can have multiple nodes running; seemingly within
// the same process. e.g. client and server of a p2p network.
message Node {
    string id   = 1;
    string ipv4 = 2;
    uint32 port = 3;
}

// Credentials will usually be a combination of username and a 
// secret. It's upto the implementation to use plain text passwords
// or hashes as secrets.
message Credentials {
    string username = 1;
    string secret   = 2;
}

// SessionType is an enumeration to indicate the type of the session
// between 2 Node s.
enum SessionType {
    SINGLE_CALL = 0;
    MULTI_CALL  = 1;
}

// Timeout defines the time in millis for a session. It can be sent
// as an argument to request a token after successfull authentication,
// or alongwith a Token to indicate the type of session and timeout 
// associated with the Token.
message Timeout {
    SessionType session_type    = 1;
    uint64 time_in_millis       = 2;
}  

// Login message with be sent by one node to another, or by a client to 
// a server. Upon login, if successfully authenticated, the client/ node
// will receive a token which it will then have to share with the server/
// other-node every time it sends/ receives messages.
message Login {
    Node initiating_node    = 1;
    Credentials credentials = 2;
    Timeout timeout         = 3;
}

// A Token is created everytime a Node is successfully authenticated. It contains
// a token value.
//
// The type of session affiliated with a Token is available as a Timeout type
// member in a token.
message Token {
    string token_val        = 1;
    Timeout session_timeout = 2;
}

// Every response should be accompanied by a status. Status has a message and a
// type to indicate the type of status in the response/ acknowledgement.
message Status {
    string message  = 1;

    enum Type {
        NO_ERROR            = 0;
        NO_DATA_FOUND       = 1;
        PERMISSION_DENIED   = 2;
        NO_SUCH_DATA        = 3;
        ERROR               = 4;
    }

    Type type       = 2;
}

// Read messages are sent to read data. Login information is sent with the underlying
// read request to authenticate/ authorize the user, to read the data.
message Read {
    Login login     = 1;
    bytes req_data  = 2;
}

message Request {
    google.protobuf.Any payload     = 1;

    enum Type {
        SYNC        = 0;
        ASYNC       = 1;
        PUBLISH     = 2;
        SUBSCRIBE   = 3;
    }

    Type type                       = 2;
}

message Response {
    Status  status              = 1;
    google.protobuf.Any data    = 2;
}